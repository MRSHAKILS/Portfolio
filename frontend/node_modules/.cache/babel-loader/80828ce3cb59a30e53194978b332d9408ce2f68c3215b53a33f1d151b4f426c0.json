{"ast":null,"code":"import React from'react';import{motion}from'framer-motion';import{Award,BookOpen,Code,Trophy}from'lucide-react';import{portfolioData}from'../data/mockData';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Achievements=()=>{const{achievements}=portfolioData;const getIcon=type=>{switch(type){case'certification':return/*#__PURE__*/_jsx(Award,{size:24});case'award':return/*#__PURE__*/_jsx(Trophy,{size:24});case'education':return/*#__PURE__*/_jsx(BookOpen,{size:24});case'contribution':return/*#__PURE__*/_jsx(Code,{size:24});default:return/*#__PURE__*/_jsx(Award,{size:24});}};const getTypeColor=type=>{switch(type){case'certification':return'type-certification';case'award':return'type-award';case'education':return'type-education';case'contribution':return'type-contribution';default:return'type-certification';}};const containerVariants={hidden:{opacity:0},visible:{opacity:1,transition:{staggerChildren:0.2,delayChildren:0.1}}};const itemVariants={hidden:{opacity:0,y:50,rotateX:-15},visible:{opacity:1,y:0,rotateX:0,transition:{duration:0.8,ease:\"easeOut\"}}};return/*#__PURE__*/_jsx(\"section\",{className:\"achievements\",children:/*#__PURE__*/_jsx(\"div\",{className:\"section-container\",children:/*#__PURE__*/_jsxs(motion.div,{className:\"achievements-content\",variants:containerVariants,initial:\"hidden\",whileInView:\"visible\",viewport:{once:true,amount:0.3},children:[/*#__PURE__*/_jsxs(motion.div,{className:\"section-header\",variants:itemVariants,children:[/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"Achievements & Recognition\"}),/*#__PURE__*/_jsx(\"div\",{className:\"section-line\"}),/*#__PURE__*/_jsx(\"p\",{className:\"section-subtitle\",children:\"Milestones and accomplishments in my professional journey\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"achievements-grid\",children:achievements.map((achievement,index)=>/*#__PURE__*/_jsxs(motion.div,{className:\"achievement-card\",variants:itemVariants,whileHover:{y:-10,rotateY:5,scale:1.02,transition:{duration:0.3}},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"achievement-image\",children:[/*#__PURE__*/_jsx(\"img\",{src:achievement.image,alt:achievement.title,loading:\"lazy\"}),/*#__PURE__*/_jsx(\"div\",{className:\"achievement-overlay\",children:/*#__PURE__*/_jsx(motion.div,{className:\"achievement-icon \".concat(getTypeColor(achievement.type)),whileHover:{scale:1.2,rotate:10},children:getIcon(achievement.type)})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"achievement-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"achievement-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"achievement-title\",children:achievement.title}),/*#__PURE__*/_jsx(\"span\",{className:\"achievement-date\",children:achievement.date})]}),/*#__PURE__*/_jsx(\"p\",{className:\"achievement-organization\",children:achievement.organization}),/*#__PURE__*/_jsx(\"p\",{className:\"achievement-description\",children:achievement.description}),/*#__PURE__*/_jsx(\"div\",{className:\"achievement-type\",children:/*#__PURE__*/_jsx(\"span\",{className:\"type-badge \".concat(getTypeColor(achievement.type)),children:achievement.type.charAt(0).toUpperCase()+achievement.type.slice(1)})})]})]},achievement.id))})]})})});};export default Achievements;","map":{"version":3,"names":["React","motion","Award","BookOpen","Code","Trophy","portfolioData","jsx","_jsx","jsxs","_jsxs","Achievements","achievements","getIcon","type","size","getTypeColor","containerVariants","hidden","opacity","visible","transition","staggerChildren","delayChildren","itemVariants","y","rotateX","duration","ease","className","children","div","variants","initial","whileInView","viewport","once","amount","map","achievement","index","whileHover","rotateY","scale","src","image","alt","title","loading","concat","rotate","date","organization","description","charAt","toUpperCase","slice","id"],"sources":["D:/HP/D/portfolio_app/frontend/src/components/Achievements.jsx"],"sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Award, BookOpen, Code, Trophy } from 'lucide-react';\nimport { portfolioData } from '../data/mockData';\n\nconst Achievements = () => {\n  const { achievements } = portfolioData;\n\n  const getIcon = (type) => {\n    switch (type) {\n      case 'certification':\n        return <Award size={24} />;\n      case 'award':\n        return <Trophy size={24} />;\n      case 'education':\n        return <BookOpen size={24} />;\n      case 'contribution':\n        return <Code size={24} />;\n      default:\n        return <Award size={24} />;\n    }\n  };\n\n  const getTypeColor = (type) => {\n    switch (type) {\n      case 'certification':\n        return 'type-certification';\n      case 'award':\n        return 'type-award';\n      case 'education':\n        return 'type-education';\n      case 'contribution':\n        return 'type-contribution';\n      default:\n        return 'type-certification';\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n        delayChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 50, rotateX: -15 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      rotateX: 0,\n      transition: { duration: 0.8, ease: \"easeOut\" }\n    }\n  };\n\n  return (\n    <section className=\"achievements\">\n      <div className=\"section-container\">\n        <motion.div\n          className=\"achievements-content\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true, amount: 0.3 }}\n        >\n          <motion.div className=\"section-header\" variants={itemVariants}>\n            <h2 className=\"section-title\">Achievements & Recognition</h2>\n            <div className=\"section-line\" />\n            <p className=\"section-subtitle\">\n              Milestones and accomplishments in my professional journey\n            </p>\n          </motion.div>\n\n          <div className=\"achievements-grid\">\n            {achievements.map((achievement, index) => (\n              <motion.div\n                key={achievement.id}\n                className=\"achievement-card\"\n                variants={itemVariants}\n                whileHover={{ \n                  y: -10,\n                  rotateY: 5,\n                  scale: 1.02,\n                  transition: { duration: 0.3 }\n                }}\n              >\n                <div className=\"achievement-image\">\n                  <img\n                    src={achievement.image}\n                    alt={achievement.title}\n                    loading=\"lazy\"\n                  />\n                  <div className=\"achievement-overlay\">\n                    <motion.div\n                      className={`achievement-icon ${getTypeColor(achievement.type)}`}\n                      whileHover={{ scale: 1.2, rotate: 10 }}\n                    >\n                      {getIcon(achievement.type)}\n                    </motion.div>\n                  </div>\n                </div>\n\n                <div className=\"achievement-content\">\n                  <div className=\"achievement-header\">\n                    <h3 className=\"achievement-title\">{achievement.title}</h3>\n                    <span className=\"achievement-date\">{achievement.date}</span>\n                  </div>\n                  \n                  <p className=\"achievement-organization\">{achievement.organization}</p>\n                  <p className=\"achievement-description\">{achievement.description}</p>\n                  \n                  <div className=\"achievement-type\">\n                    <span className={`type-badge ${getTypeColor(achievement.type)}`}>\n                      {achievement.type.charAt(0).toUpperCase() + achievement.type.slice(1)}\n                    </span>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n\nexport default Achievements;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}